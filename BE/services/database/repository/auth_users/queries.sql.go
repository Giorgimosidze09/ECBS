// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package repository_auth_users

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuthUser = `-- name: CreateAuthUser :one
INSERT INTO auth_users (username, password_hash, role)
VALUES ($1, $2, $3)
RETURNING id, username, password_hash, role, created_at, updated_at
`

type CreateAuthUserParams struct {
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
	Role         string `json:"role"`
}

type CreateAuthUserRow struct {
	ID           int32            `json:"id"`
	Username     string           `json:"username"`
	PasswordHash string           `json:"password_hash"`
	Role         string           `json:"role"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) CreateAuthUser(ctx context.Context, arg CreateAuthUserParams) (CreateAuthUserRow, error) {
	row := q.db.QueryRow(ctx, createAuthUser, arg.Username, arg.PasswordHash, arg.Role)
	var i CreateAuthUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAuthUserByID = `-- name: GetAuthUserByID :one
SELECT id, username, password_hash, role, created_at, updated_at
FROM auth_users
WHERE id = $1
`

type GetAuthUserByIDRow struct {
	ID           int32            `json:"id"`
	Username     string           `json:"username"`
	PasswordHash string           `json:"password_hash"`
	Role         string           `json:"role"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetAuthUserByID(ctx context.Context, id int32) (GetAuthUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getAuthUserByID, id)
	var i GetAuthUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAuthUserByUsername = `-- name: GetAuthUserByUsername :one
SELECT id, username, password_hash, role, device_id, created_at, updated_at
FROM auth_users
WHERE username = $1
`

func (q *Queries) GetAuthUserByUsername(ctx context.Context, username string) (AuthUser, error) {
	row := q.db.QueryRow(ctx, getAuthUserByUsername, username)
	var i AuthUser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.DeviceID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAuthUsers = `-- name: ListAuthUsers :many
SELECT id, username, password_hash, role, created_at, updated_at
FROM auth_users
ORDER BY id
`

type ListAuthUsersRow struct {
	ID           int32            `json:"id"`
	Username     string           `json:"username"`
	PasswordHash string           `json:"password_hash"`
	Role         string           `json:"role"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) ListAuthUsers(ctx context.Context) ([]ListAuthUsersRow, error) {
	rows, err := q.db.Query(ctx, listAuthUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAuthUsersRow
	for rows.Next() {
		var i ListAuthUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.PasswordHash,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
