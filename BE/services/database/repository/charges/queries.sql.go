// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package repository_charges

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const chargesList = `-- name: ChargesList :many
SELECT
  c.id, c.user_id, c.amount, c.type, c.description, c.created_at,
  COUNT(*) OVER() AS total
FROM charges c
ORDER BY c.id
LIMIT $1 OFFSET $2
`

type ChargesListParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ChargesListRow struct {
	ID          int32              `json:"id"`
	UserID      pgtype.Int4        `json:"user_id"`
	Amount      pgtype.Numeric     `json:"amount"`
	Type        string             `json:"type"`
	Description pgtype.Text        `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	Total       int64              `json:"total"`
}

func (q *Queries) ChargesList(ctx context.Context, arg ChargesListParams) ([]ChargesListRow, error) {
	rows, err := q.db.Query(ctx, chargesList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChargesListRow
	for rows.Next() {
		var i ChargesListRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Type,
			&i.Description,
			&i.CreatedAt,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCharge = `-- name: InsertCharge :exec
INSERT INTO charges (user_id, amount, type, description, created_at) VALUES ($1, $2, 'ride', $3, NOW())
`

type InsertChargeParams struct {
	UserID      pgtype.Int4    `json:"user_id"`
	Amount      pgtype.Numeric `json:"amount"`
	Description pgtype.Text    `json:"description"`
}

func (q *Queries) InsertCharge(ctx context.Context, arg InsertChargeParams) error {
	_, err := q.db.Exec(ctx, insertCharge, arg.UserID, arg.Amount, arg.Description)
	return err
}
