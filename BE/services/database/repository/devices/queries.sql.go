// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package repository_devices

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices (device_id, location, active, installed_at)
VALUES ($1, $2, true, NOW())
ON CONFLICT (id) DO NOTHING
RETURNING id, device_id, location, installed_at, active
`

type CreateDeviceParams struct {
	DeviceID string      `json:"device_id"`
	Location pgtype.Text `json:"location"`
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, createDevice, arg.DeviceID, arg.Location)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.Location,
		&i.InstalledAt,
		&i.Active,
	)
	return i, err
}

const deviceList = `-- name: DeviceList :many
SELECT
  b.id, b.device_id, b.location, b.installed_at, b.active,
  COUNT(*) OVER() AS total
FROM devices b
ORDER BY b.id
LIMIT $1 OFFSET $2
`

type DeviceListParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type DeviceListRow struct {
	ID          int32              `json:"id"`
	DeviceID    string             `json:"device_id"`
	Location    pgtype.Text        `json:"location"`
	InstalledAt pgtype.Timestamptz `json:"installed_at"`
	Active      pgtype.Bool        `json:"active"`
	Total       int64              `json:"total"`
}

func (q *Queries) DeviceList(ctx context.Context, arg DeviceListParams) ([]DeviceListRow, error) {
	rows, err := q.db.Query(ctx, deviceList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeviceListRow
	for rows.Next() {
		var i DeviceListRow
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.Location,
			&i.InstalledAt,
			&i.Active,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuthorizedAccessByDeviceUniqueID = `-- name: GetAuthorizedAccessByDeviceUniqueID :many
SELECT
    c.card_id,
    u.id AS user_id,
    u.name AS user_name,
    u.pin_code, 
    c.type,
    c.active,
    b.balance,
    b.ride_cost,
    a.activation_start,
    a.activation_end
FROM cards c
JOIN users u ON u.id = c.user_id
LEFT JOIN balances b ON b.card_id = c.id
LEFT JOIN LATERAL (
    SELECT activation_start, activation_end
    FROM card_activations
    WHERE card_id = c.id
    ORDER BY activation_end DESC
    LIMIT 1
) a ON TRUE
JOIN devices d ON d.id = c.device_id
WHERE d.device_id = $1 AND c.deleted = FALSE
`

type GetAuthorizedAccessByDeviceUniqueIDRow struct {
	CardID          string         `json:"card_id"`
	UserID          int32          `json:"user_id"`
	UserName        string         `json:"user_name"`
	PinCode         pgtype.Text    `json:"pin_code"`
	Type            string         `json:"type"`
	Active          pgtype.Bool    `json:"active"`
	Balance         pgtype.Numeric `json:"balance"`
	RideCost        pgtype.Numeric `json:"ride_cost"`
	ActivationStart pgtype.Date    `json:"activation_start"`
	ActivationEnd   pgtype.Date    `json:"activation_end"`
}

func (q *Queries) GetAuthorizedAccessByDeviceUniqueID(ctx context.Context, deviceID string) ([]GetAuthorizedAccessByDeviceUniqueIDRow, error) {
	rows, err := q.db.Query(ctx, getAuthorizedAccessByDeviceUniqueID, deviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAuthorizedAccessByDeviceUniqueIDRow
	for rows.Next() {
		var i GetAuthorizedAccessByDeviceUniqueIDRow
		if err := rows.Scan(
			&i.CardID,
			&i.UserID,
			&i.UserName,
			&i.PinCode,
			&i.Type,
			&i.Active,
			&i.Balance,
			&i.RideCost,
			&i.ActivationStart,
			&i.ActivationEnd,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeviceByID = `-- name: GetDeviceByID :one
SELECT id, device_id, location, installed_at, active FROM devices WHERE id = $1
`

func (q *Queries) GetDeviceByID(ctx context.Context, id int32) (Device, error) {
	row := q.db.QueryRow(ctx, getDeviceByID, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.Location,
		&i.InstalledAt,
		&i.Active,
	)
	return i, err
}

const softDeleteDevice = `-- name: SoftDeleteDevice :exec
UPDATE devices SET active = FALSE WHERE id = $1
`

func (q *Queries) SoftDeleteDevice(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeleteDevice, id)
	return err
}

const updateDevice = `-- name: UpdateDevice :exec
UPDATE devices SET device_id = $2, location = $3, active = $4 WHERE id = $1
`

type UpdateDeviceParams struct {
	ID       int32       `json:"id"`
	DeviceID string      `json:"device_id"`
	Location pgtype.Text `json:"location"`
	Active   pgtype.Bool `json:"active"`
}

func (q *Queries) UpdateDevice(ctx context.Context, arg UpdateDeviceParams) error {
	_, err := q.db.Exec(ctx, updateDevice,
		arg.ID,
		arg.DeviceID,
		arg.Location,
		arg.Active,
	)
	return err
}
