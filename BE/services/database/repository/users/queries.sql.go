// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package repository_users

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO USERS (name, email, phone,  created_at, updated_at, deleted)
VALUES ($1, $2, $3, NOW(), NOW(), false)
ON CONFLICT (id) DO NOTHING
RETURNING id, name,  email, phone,  created_at, updated_at, deleted
`

type CreateUserParams struct {
	Name  string      `json:"name"`
	Email pgtype.Text `json:"email"`
	Phone pgtype.Text `json:"phone"`
}

type CreateUserRow struct {
	ID        int32              `json:"id"`
	Name      string             `json:"name"`
	Email     pgtype.Text        `json:"email"`
	Phone     pgtype.Text        `json:"phone"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	Deleted   pgtype.Bool        `json:"deleted"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.Phone)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, phone, deleted FROM users WHERE id = $1
`

type GetUserByIDRow struct {
	ID      int32       `json:"id"`
	Name    string      `json:"name"`
	Email   pgtype.Text `json:"email"`
	Phone   pgtype.Text `json:"phone"`
	Deleted pgtype.Bool `json:"deleted"`
}

func (q *Queries) GetUserByID(ctx context.Context, id int32) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Deleted,
	)
	return i, err
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE users SET deleted = TRUE WHERE id = $1
`

func (q *Queries) SoftDeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeleteUser, id)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET name = $2, email = $3, phone = $4, updated_at = NOW() WHERE id = $1
`

type UpdateUserParams struct {
	ID    int32       `json:"id"`
	Name  string      `json:"name"`
	Email pgtype.Text `json:"email"`
	Phone pgtype.Text `json:"phone"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Phone,
	)
	return err
}

const usersList = `-- name: UsersList :many
SELECT
  u.id,
  u.name,
  u.email,
  u.phone,
  COALESCE(card_counts.card_count, 0) AS card_count,
 COALESCE(balance_sums.total_balance, 0)::float8 AS total_balance,
  COUNT(*) OVER() AS total
FROM users u
LEFT JOIN (
    SELECT user_id, COUNT(*) AS card_count
    FROM cards
    GROUP BY user_id
) AS card_counts ON card_counts.user_id = u.id
LEFT JOIN (
    SELECT user_id, SUM(balance) AS total_balance
    FROM balances
    GROUP BY user_id
) AS balance_sums ON balance_sums.user_id = u.id
WHERE deleted = false
ORDER BY u.id
LIMIT $1 OFFSET $2
`

type UsersListParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type UsersListRow struct {
	ID           int32       `json:"id"`
	Name         string      `json:"name"`
	Email        pgtype.Text `json:"email"`
	Phone        pgtype.Text `json:"phone"`
	CardCount    int64       `json:"card_count"`
	TotalBalance float64     `json:"total_balance"`
	Total        int64       `json:"total"`
}

func (q *Queries) UsersList(ctx context.Context, arg UsersListParams) ([]UsersListRow, error) {
	rows, err := q.db.Query(ctx, usersList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersListRow
	for rows.Next() {
		var i UsersListRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.CardCount,
			&i.TotalBalance,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
