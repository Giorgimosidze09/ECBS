// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package repository_users

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const balaneList = `-- name: BalaneList :many
SELECT
  b.id, b.user_id, b.card_id, b.ride_cost, b.balance, b.updated_at,
  COUNT(*) OVER() AS total
FROM balances b
ORDER BY b.id
LIMIT $1 OFFSET $2
`

type BalaneListParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type BalaneListRow struct {
	ID        int32              `json:"id"`
	UserID    pgtype.Int4        `json:"user_id"`
	CardID    int32              `json:"card_id"`
	RideCost  pgtype.Numeric     `json:"ride_cost"`
	Balance   pgtype.Numeric     `json:"balance"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	Total     int64              `json:"total"`
}

func (q *Queries) BalaneList(ctx context.Context, arg BalaneListParams) ([]BalaneListRow, error) {
	rows, err := q.db.Query(ctx, balaneList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BalaneListRow
	for rows.Next() {
		var i BalaneListRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CardID,
			&i.RideCost,
			&i.Balance,
			&i.UpdatedAt,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const cardsList = `-- name: CardsList :many
SELECT
  c.id,
  c.card_id,
  c.user_id,
  c.device_id,
  c.type,
  c.active,
  c.assigned_at,
  COUNT(*) OVER() AS total
FROM cards c
JOIN users u ON u.id = c.user_id
WHERE u.deleted = false
ORDER BY c.id
LIMIT $1 OFFSET $2
`

type CardsListParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type CardsListRow struct {
	ID         int32              `json:"id"`
	CardID     string             `json:"card_id"`
	UserID     int32              `json:"user_id"`
	DeviceID   int32              `json:"device_id"`
	Type       string             `json:"type"`
	Active     pgtype.Bool        `json:"active"`
	AssignedAt pgtype.Timestamptz `json:"assigned_at"`
	Total      int64              `json:"total"`
}

func (q *Queries) CardsList(ctx context.Context, arg CardsListParams) ([]CardsListRow, error) {
	rows, err := q.db.Query(ctx, cardsList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CardsListRow
	for rows.Next() {
		var i CardsListRow
		if err := rows.Scan(
			&i.ID,
			&i.CardID,
			&i.UserID,
			&i.DeviceID,
			&i.Type,
			&i.Active,
			&i.AssignedAt,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const chargesList = `-- name: ChargesList :many
SELECT
  c.id, c.user_id, c.amount, c.type, c.description, c.created_at,
  COUNT(*) OVER() AS total
FROM charges c
ORDER BY c.id
LIMIT $1 OFFSET $2
`

type ChargesListParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ChargesListRow struct {
	ID          int32              `json:"id"`
	UserID      pgtype.Int4        `json:"user_id"`
	Amount      pgtype.Numeric     `json:"amount"`
	Type        string             `json:"type"`
	Description pgtype.Text        `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	Total       int64              `json:"total"`
}

func (q *Queries) ChargesList(ctx context.Context, arg ChargesListParams) ([]ChargesListRow, error) {
	rows, err := q.db.Query(ctx, chargesList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChargesListRow
	for rows.Next() {
		var i ChargesListRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Type,
			&i.Description,
			&i.CreatedAt,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const costOfRide = `-- name: CostOfRide :exec
UPDATE balances
SET
    ride_cost = $1,
    updated_at = NOW()
`

func (q *Queries) CostOfRide(ctx context.Context, rideCost pgtype.Numeric) error {
	_, err := q.db.Exec(ctx, costOfRide, rideCost)
	return err
}

const countCards = `-- name: CountCards :one
SELECT COUNT(*) FROM cards
`

func (q *Queries) CountCards(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countCards)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAuthUser = `-- name: CreateAuthUser :one

INSERT INTO auth_users (username, password_hash, role)
VALUES ($1, $2, $3)
RETURNING id, username, password_hash, role, created_at, updated_at
`

type CreateAuthUserParams struct {
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
	Role         string `json:"role"`
}

type CreateAuthUserRow struct {
	ID           int32            `json:"id"`
	Username     string           `json:"username"`
	PasswordHash string           `json:"password_hash"`
	Role         string           `json:"role"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

// AUTH USERS QUERIES
func (q *Queries) CreateAuthUser(ctx context.Context, arg CreateAuthUserParams) (CreateAuthUserRow, error) {
	row := q.db.QueryRow(ctx, createAuthUser, arg.Username, arg.PasswordHash, arg.Role)
	var i CreateAuthUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createCard = `-- name: CreateCard :one
INSERT INTO Cards (card_id, user_id, device_id, active, type, assigned_at)
VALUES ($1, $2, $3, $4, $5, NOW())
ON CONFLICT (id) DO NOTHING
RETURNING id, card_id, user_id, device_id, active, type, assigned_at
`

type CreateCardParams struct {
	CardID   string      `json:"card_id"`
	UserID   int32       `json:"user_id"`
	DeviceID int32       `json:"device_id"`
	Active   pgtype.Bool `json:"active"`
	Type     string      `json:"type"`
}

type CreateCardRow struct {
	ID         int32              `json:"id"`
	CardID     string             `json:"card_id"`
	UserID     int32              `json:"user_id"`
	DeviceID   int32              `json:"device_id"`
	Active     pgtype.Bool        `json:"active"`
	Type       string             `json:"type"`
	AssignedAt pgtype.Timestamptz `json:"assigned_at"`
}

func (q *Queries) CreateCard(ctx context.Context, arg CreateCardParams) (CreateCardRow, error) {
	row := q.db.QueryRow(ctx, createCard,
		arg.CardID,
		arg.UserID,
		arg.DeviceID,
		arg.Active,
		arg.Type,
	)
	var i CreateCardRow
	err := row.Scan(
		&i.ID,
		&i.CardID,
		&i.UserID,
		&i.DeviceID,
		&i.Active,
		&i.Type,
		&i.AssignedAt,
	)
	return i, err
}

const createCardActivation = `-- name: CreateCardActivation :one
INSERT INTO card_activations (card_id, activation_start, activation_end, created_at, updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
RETURNING id, card_id, activation_start, activation_end, created_at, updated_at
`

type CreateCardActivationParams struct {
	CardID          int32       `json:"card_id"`
	ActivationStart pgtype.Date `json:"activation_start"`
	ActivationEnd   pgtype.Date `json:"activation_end"`
}

func (q *Queries) CreateCardActivation(ctx context.Context, arg CreateCardActivationParams) (CardActivation, error) {
	row := q.db.QueryRow(ctx, createCardActivation, arg.CardID, arg.ActivationStart, arg.ActivationEnd)
	var i CardActivation
	err := row.Scan(
		&i.ID,
		&i.CardID,
		&i.ActivationStart,
		&i.ActivationEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices (device_id, location, active, installed_at)
VALUES ($1, $2, true, NOW())
ON CONFLICT (id) DO NOTHING
RETURNING id, device_id, location, installed_at, active
`

type CreateDeviceParams struct {
	DeviceID string      `json:"device_id"`
	Location pgtype.Text `json:"location"`
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, createDevice, arg.DeviceID, arg.Location)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.Location,
		&i.InstalledAt,
		&i.Active,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO USERS (name, email, phone,  created_at, updated_at, deleted)
VALUES ($1, $2, $3, NOW(), NOW(), false)
ON CONFLICT (id) DO NOTHING
RETURNING id, name,  email, phone,  created_at, updated_at, deleted
`

type CreateUserParams struct {
	Name  string      `json:"name"`
	Email pgtype.Text `json:"email"`
	Phone pgtype.Text `json:"phone"`
}

type CreateUserRow struct {
	ID        int32              `json:"id"`
	Name      string             `json:"name"`
	Email     pgtype.Text        `json:"email"`
	Phone     pgtype.Text        `json:"phone"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	Deleted   pgtype.Bool        `json:"deleted"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.Phone)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
	)
	return i, err
}

const deductBalance = `-- name: DeductBalance :exec
UPDATE balances SET balance = balance - $1, updated_at = NOW() WHERE user_id = $2 AND balance >= $1
`

type DeductBalanceParams struct {
	Balance pgtype.Numeric `json:"balance"`
	UserID  pgtype.Int4    `json:"user_id"`
}

func (q *Queries) DeductBalance(ctx context.Context, arg DeductBalanceParams) error {
	_, err := q.db.Exec(ctx, deductBalance, arg.Balance, arg.UserID)
	return err
}

const deviceList = `-- name: DeviceList :many
SELECT
  b.id, b.device_id, b.location, b.installed_at, b.active,
  COUNT(*) OVER() AS total
FROM devices b
ORDER BY b.id
LIMIT $1 OFFSET $2
`

type DeviceListParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type DeviceListRow struct {
	ID          int32              `json:"id"`
	DeviceID    string             `json:"device_id"`
	Location    pgtype.Text        `json:"location"`
	InstalledAt pgtype.Timestamptz `json:"installed_at"`
	Active      pgtype.Bool        `json:"active"`
	Total       int64              `json:"total"`
}

func (q *Queries) DeviceList(ctx context.Context, arg DeviceListParams) ([]DeviceListRow, error) {
	rows, err := q.db.Query(ctx, deviceList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeviceListRow
	for rows.Next() {
		var i DeviceListRow
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.Location,
			&i.InstalledAt,
			&i.Active,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuthUserByID = `-- name: GetAuthUserByID :one
SELECT id, username, password_hash, role, created_at, updated_at
FROM auth_users
WHERE id = $1
`

type GetAuthUserByIDRow struct {
	ID           int32            `json:"id"`
	Username     string           `json:"username"`
	PasswordHash string           `json:"password_hash"`
	Role         string           `json:"role"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetAuthUserByID(ctx context.Context, id int32) (GetAuthUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getAuthUserByID, id)
	var i GetAuthUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAuthUserByUsername = `-- name: GetAuthUserByUsername :one
SELECT id, username, password_hash, role, device_id, created_at, updated_at
FROM auth_users
WHERE username = $1
`

func (q *Queries) GetAuthUserByUsername(ctx context.Context, username string) (AuthUser, error) {
	row := q.db.QueryRow(ctx, getAuthUserByUsername, username)
	var i AuthUser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.DeviceID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAuthorizedAccessByDeviceUniqueID = `-- name: GetAuthorizedAccessByDeviceUniqueID :many
SELECT
    c.card_id,
    u.id AS user_id,
    u.name AS user_name,
    u.pin_code, 
    c.type,
    c.active,
    b.balance,
    b.ride_cost,
    a.activation_start,
    a.activation_end
FROM cards c
JOIN users u ON u.id = c.user_id
LEFT JOIN balances b ON b.card_id = c.id
LEFT JOIN LATERAL (
    SELECT activation_start, activation_end
    FROM card_activations
    WHERE card_id = c.id
    ORDER BY activation_end DESC
    LIMIT 1
) a ON TRUE
JOIN devices d ON d.id = c.device_id
WHERE d.device_id = $1 AND c.deleted = FALSE
`

type GetAuthorizedAccessByDeviceUniqueIDRow struct {
	CardID          string         `json:"card_id"`
	UserID          int32          `json:"user_id"`
	UserName        string         `json:"user_name"`
	PinCode         pgtype.Text    `json:"pin_code"`
	Type            string         `json:"type"`
	Active          pgtype.Bool    `json:"active"`
	Balance         pgtype.Numeric `json:"balance"`
	RideCost        pgtype.Numeric `json:"ride_cost"`
	ActivationStart pgtype.Date    `json:"activation_start"`
	ActivationEnd   pgtype.Date    `json:"activation_end"`
}

func (q *Queries) GetAuthorizedAccessByDeviceUniqueID(ctx context.Context, deviceID string) ([]GetAuthorizedAccessByDeviceUniqueIDRow, error) {
	rows, err := q.db.Query(ctx, getAuthorizedAccessByDeviceUniqueID, deviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAuthorizedAccessByDeviceUniqueIDRow
	for rows.Next() {
		var i GetAuthorizedAccessByDeviceUniqueIDRow
		if err := rows.Scan(
			&i.CardID,
			&i.UserID,
			&i.UserName,
			&i.PinCode,
			&i.Type,
			&i.Active,
			&i.Balance,
			&i.RideCost,
			&i.ActivationStart,
			&i.ActivationEnd,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBalanceByUserID = `-- name: GetBalanceByUserID :one
SELECT user_id, balance, ride_cost, updated_at
FROM balances
WHERE user_id = $1
`

type GetBalanceByUserIDRow struct {
	UserID    pgtype.Int4        `json:"user_id"`
	Balance   pgtype.Numeric     `json:"balance"`
	RideCost  pgtype.Numeric     `json:"ride_cost"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetBalanceByUserID(ctx context.Context, userID pgtype.Int4) (GetBalanceByUserIDRow, error) {
	row := q.db.QueryRow(ctx, getBalanceByUserID, userID)
	var i GetBalanceByUserIDRow
	err := row.Scan(
		&i.UserID,
		&i.Balance,
		&i.RideCost,
		&i.UpdatedAt,
	)
	return i, err
}

const getCardByCardID = `-- name: GetCardByCardID :one
SELECT c.id, c.card_id, c.user_id, c.active, c.type, u.name as user_name
FROM cards c
JOIN users u ON u.id = c.user_id
WHERE c.id = $1
`

type GetCardByCardIDRow struct {
	ID       int32       `json:"id"`
	CardID   string      `json:"card_id"`
	UserID   int32       `json:"user_id"`
	Active   pgtype.Bool `json:"active"`
	Type     string      `json:"type"`
	UserName string      `json:"user_name"`
}

func (q *Queries) GetCardByCardID(ctx context.Context, id int32) (GetCardByCardIDRow, error) {
	row := q.db.QueryRow(ctx, getCardByCardID, id)
	var i GetCardByCardIDRow
	err := row.Scan(
		&i.ID,
		&i.CardID,
		&i.UserID,
		&i.Active,
		&i.Type,
		&i.UserName,
	)
	return i, err
}

const getCardByID = `-- name: GetCardByID :one
SELECT id, card_id, user_id, device_id, active, type, assigned_at FROM cards WHERE id = $1
`

type GetCardByIDRow struct {
	ID         int32              `json:"id"`
	CardID     string             `json:"card_id"`
	UserID     int32              `json:"user_id"`
	DeviceID   int32              `json:"device_id"`
	Active     pgtype.Bool        `json:"active"`
	Type       string             `json:"type"`
	AssignedAt pgtype.Timestamptz `json:"assigned_at"`
}

func (q *Queries) GetCardByID(ctx context.Context, id int32) (GetCardByIDRow, error) {
	row := q.db.QueryRow(ctx, getCardByID, id)
	var i GetCardByIDRow
	err := row.Scan(
		&i.ID,
		&i.CardID,
		&i.UserID,
		&i.DeviceID,
		&i.Active,
		&i.Type,
		&i.AssignedAt,
	)
	return i, err
}

const getDeviceByID = `-- name: GetDeviceByID :one
SELECT id, device_id, location, installed_at, active FROM devices WHERE id = $1
`

func (q *Queries) GetDeviceByID(ctx context.Context, id int32) (Device, error) {
	row := q.db.QueryRow(ctx, getDeviceByID, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.Location,
		&i.InstalledAt,
		&i.Active,
	)
	return i, err
}

const getSumBalanceByDeviceID = `-- name: GetSumBalanceByDeviceID :one
SELECT COALESCE(SUM(b.balance), 0) AS total_balance
FROM balances b
JOIN cards c ON b.card_id = c.id
JOIN devices d ON c.device_id = d.id
WHERE d.device_id = $1
`

func (q *Queries) GetSumBalanceByDeviceID(ctx context.Context, deviceID string) (interface{}, error) {
	row := q.db.QueryRow(ctx, getSumBalanceByDeviceID, deviceID)
	var total_balance interface{}
	err := row.Scan(&total_balance)
	return total_balance, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, phone, deleted FROM users WHERE id = $1
`

type GetUserByIDRow struct {
	ID      int32       `json:"id"`
	Name    string      `json:"name"`
	Email   pgtype.Text `json:"email"`
	Phone   pgtype.Text `json:"phone"`
	Deleted pgtype.Bool `json:"deleted"`
}

func (q *Queries) GetUserByID(ctx context.Context, id int32) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Deleted,
	)
	return i, err
}

const insertCharge = `-- name: InsertCharge :exec
INSERT INTO charges (user_id, amount, type, description, created_at) VALUES ($1, $2, 'ride', $3, NOW())
`

type InsertChargeParams struct {
	UserID      pgtype.Int4    `json:"user_id"`
	Amount      pgtype.Numeric `json:"amount"`
	Description pgtype.Text    `json:"description"`
}

func (q *Queries) InsertCharge(ctx context.Context, arg InsertChargeParams) error {
	_, err := q.db.Exec(ctx, insertCharge, arg.UserID, arg.Amount, arg.Description)
	return err
}

const listAuthUsers = `-- name: ListAuthUsers :many
SELECT id, username, password_hash, role, created_at, updated_at
FROM auth_users
ORDER BY id
`

type ListAuthUsersRow struct {
	ID           int32            `json:"id"`
	Username     string           `json:"username"`
	PasswordHash string           `json:"password_hash"`
	Role         string           `json:"role"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) ListAuthUsers(ctx context.Context) ([]ListAuthUsersRow, error) {
	rows, err := q.db.Query(ctx, listAuthUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAuthUsersRow
	for rows.Next() {
		var i ListAuthUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.PasswordHash,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteCard = `-- name: SoftDeleteCard :exec
UPDATE cards SET deleted = TRUE WHERE id = $1
`

func (q *Queries) SoftDeleteCard(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeleteCard, id)
	return err
}

const softDeleteDevice = `-- name: SoftDeleteDevice :exec
UPDATE devices SET active = FALSE WHERE id = $1
`

func (q *Queries) SoftDeleteDevice(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeleteDevice, id)
	return err
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE users SET deleted = TRUE WHERE id = $1
`

func (q *Queries) SoftDeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeleteUser, id)
	return err
}

const topUpBalance = `-- name: TopUpBalance :one
INSERT INTO balances (user_id, card_id, balance, ride_cost, updated_at)
VALUES ($1, $2, $3, $4,NOW())
ON CONFLICT (user_id, card_id)
DO UPDATE SET balance = EXCLUDED.balance, updated_at = NOW()
RETURNING user_id, card_id, balance, updated_at
`

type TopUpBalanceParams struct {
	UserID   pgtype.Int4    `json:"user_id"`
	CardID   int32          `json:"card_id"`
	Balance  pgtype.Numeric `json:"balance"`
	RideCost pgtype.Numeric `json:"ride_cost"`
}

type TopUpBalanceRow struct {
	UserID    pgtype.Int4        `json:"user_id"`
	CardID    int32              `json:"card_id"`
	Balance   pgtype.Numeric     `json:"balance"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) TopUpBalance(ctx context.Context, arg TopUpBalanceParams) (TopUpBalanceRow, error) {
	row := q.db.QueryRow(ctx, topUpBalance,
		arg.UserID,
		arg.CardID,
		arg.Balance,
		arg.RideCost,
	)
	var i TopUpBalanceRow
	err := row.Scan(
		&i.UserID,
		&i.CardID,
		&i.Balance,
		&i.UpdatedAt,
	)
	return i, err
}

const totalBalance = `-- name: TotalBalance :one
SELECT COALESCE(SUM(balance), 0) FROM balances
`

func (q *Queries) TotalBalance(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRow(ctx, totalBalance)
	var coalesce interface{}
	err := row.Scan(&coalesce)
	return coalesce, err
}

const updateCard = `-- name: UpdateCard :exec
UPDATE cards SET card_id = $2, user_id = $3, device_id = $4, type = $5, active = $6 WHERE id = $1
`

type UpdateCardParams struct {
	ID       int32       `json:"id"`
	CardID   string      `json:"card_id"`
	UserID   int32       `json:"user_id"`
	DeviceID int32       `json:"device_id"`
	Type     string      `json:"type"`
	Active   pgtype.Bool `json:"active"`
}

func (q *Queries) UpdateCard(ctx context.Context, arg UpdateCardParams) error {
	_, err := q.db.Exec(ctx, updateCard,
		arg.ID,
		arg.CardID,
		arg.UserID,
		arg.DeviceID,
		arg.Type,
		arg.Active,
	)
	return err
}

const updateDevice = `-- name: UpdateDevice :exec
UPDATE devices SET device_id = $2, location = $3, active = $4 WHERE id = $1
`

type UpdateDeviceParams struct {
	ID       int32       `json:"id"`
	DeviceID string      `json:"device_id"`
	Location pgtype.Text `json:"location"`
	Active   pgtype.Bool `json:"active"`
}

func (q *Queries) UpdateDevice(ctx context.Context, arg UpdateDeviceParams) error {
	_, err := q.db.Exec(ctx, updateDevice,
		arg.ID,
		arg.DeviceID,
		arg.Location,
		arg.Active,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET name = $2, email = $3, phone = $4, updated_at = NOW() WHERE id = $1
`

type UpdateUserParams struct {
	ID    int32       `json:"id"`
	Name  string      `json:"name"`
	Email pgtype.Text `json:"email"`
	Phone pgtype.Text `json:"phone"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Phone,
	)
	return err
}

const usersList = `-- name: UsersList :many
SELECT
  u.id,
  u.name,
  u.email,
  u.phone,
  COALESCE(card_counts.card_count, 0) AS card_count,
 COALESCE(balance_sums.total_balance, 0)::float8 AS total_balance,
  COUNT(*) OVER() AS total
FROM users u
LEFT JOIN (
    SELECT user_id, COUNT(*) AS card_count
    FROM cards
    GROUP BY user_id
) AS card_counts ON card_counts.user_id = u.id
LEFT JOIN (
    SELECT user_id, SUM(balance) AS total_balance
    FROM balances
    GROUP BY user_id
) AS balance_sums ON balance_sums.user_id = u.id
WHERE deleted = false
ORDER BY u.id
LIMIT $1 OFFSET $2
`

type UsersListParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type UsersListRow struct {
	ID           int32       `json:"id"`
	Name         string      `json:"name"`
	Email        pgtype.Text `json:"email"`
	Phone        pgtype.Text `json:"phone"`
	CardCount    int64       `json:"card_count"`
	TotalBalance float64     `json:"total_balance"`
	Total        int64       `json:"total"`
}

func (q *Queries) UsersList(ctx context.Context, arg UsersListParams) ([]UsersListRow, error) {
	rows, err := q.db.Query(ctx, usersList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersListRow
	for rows.Next() {
		var i UsersListRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.CardCount,
			&i.TotalBalance,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
